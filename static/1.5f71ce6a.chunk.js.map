{"version":3,"sources":["webpack:///static/1.5f71ce6a.chunk.js","webpack:///./README.md?27e7","webpack:///./README.md"],"names":["webpackJsonp","588","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","594"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GCFjC,GAAAC,GAAAD,EAAA,GACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,KAAAG,YACAA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAAT,EAAA,OAEhBU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACApB,EAAAC,QAAAO,GDUMa,IACA,SAAUrB,EAAQC,GEtCxBD,EAAAC,QAAA","file":"static/1.5f71ce6a.chunk.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 588:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(6);\n    var createReactClass = __webpack_require__(32);\n    var PageRenderer = __webpack_require__(210).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(594)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!./node_modules/raw-loader/index.js!./README.md\", function() {\n            component.setState({\n              content: require(\"!!./node_modules/raw-loader/index.js!./README.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 594:\n/***/ (function(module, exports) {\n\nmodule.exports = \"[![build status](https://secure.travis-ci.org/no23reason/react-qr-svg.svg)](http://travis-ci.org/no23reason/react-qr-svg) [![npm version](https://img.shields.io/npm/v/react-qr-svg.svg)](https://www.npmjs.com/package/react-qr-svg) [![bitHound Score](https://www.bithound.io/github/no23reason/react-qr-svg/badges/score.svg)](https://www.bithound.io/github/no23reason/react-qr-svg) [![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release) [![Greenkeeper badge](https://badges.greenkeeper.io/no23reason/react-qr-svg.svg)](https://greenkeeper.io/)\\r\\n# react-qr-svg\\r\\nReact component for rendering SVG QR codes\\r\\n\\r\\n## Demo\\r\\nBasic demo can be found at the [demo page](https://no23reason.github.io/react-qr-svg/#/demo).\\r\\n\\r\\n## Why SVG?\\r\\nMost of the existing React components for QR (namely [`qrcode.react`](https://github.com/zpao/qrcode.react), which was used as a starting point for this project) use `<canvas>` for rendering.\\r\\n\\r\\nThis is fine for most scenarios, however when trying to print such code, it gets blurry. This is caused by the fact that `<canvas>` contents get rastered and *then* scaled in the process resulting in the blurriness.\\r\\n\\r\\nOn the other hand, SVG retains the vector information of its contents and therefore is scaled properly when printed.\\r\\n\\r\\n## Basic Usage\\r\\n\\r\\nInstall using `npm`:\\r\\n```js\\r\\nnpm install react-qr-svg --save\\r\\n```\\r\\n\\r\\nThen use in your application like this:\\r\\n\\r\\n```js\\r\\nimport React from 'react';\\r\\nimport { QRCode } from 'react-qr-svg';\\r\\n\\r\\nclass Demo extends React.Component {\\r\\n    render() {\\r\\n        return (<QRCode\\r\\n                    bgColor=\\\"#FFFFFF\\\"\\r\\n                    fgColor=\\\"#000000\\\"\\r\\n                    level=\\\"Q\\\"\\r\\n                    style={{ width: 256 }}\\r\\n                    value=\\\"some text\\\"\\r\\n                />);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n## Props\\r\\nThe props available are (shown with default values):\\r\\n```js\\r\\n{\\r\\n    value: '', // The value to encode in the code\\r\\n    level: 'L', // QR Error correction level\\r\\n    bgColor: '#FFFFFF', // Color of the bright squares\\r\\n    fgColor: '#000000', // Color of the dark squares\\r\\n}\\r\\n```\\r\\n\\r\\nThe `level` prop corresponds to [Error correction level](https://en.wikipedia.org/wiki/QR_code#Error_correction) so the valid values are `L`, `M`, `Q` and `H`.\\r\\n\\r\\nYou can also specify all the props that are valid for the `<svg>` React element (e.g. `style`, `className` or `width` which you can use to specify the size of the QR code).\\r\\n\\r\\n## Acknowledgements\\r\\nThis project is heavily inspired by the [`qrcode.react`](https://github.com/zpao/qrcode.react) project.\\r\\n\\r\\nThis project uses the [`react-component-boilerplate`](https://github.com/survivejs/react-component-boilerplate).\\r\\n\\r\\n## License\\r\\n\\r\\n*react-qr-svg* is available under MIT. See [LICENSE](https://github.com/no23reason/react-qr-svg/tree/master/LICENSE) for more details.\\r\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/1.5f71ce6a.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!./node_modules/raw-loader/index.js!./README.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!./node_modules/raw-loader/index.js!./README.md\", function() {\n            component.setState({\n              content: require(\"!!./node_modules/raw-loader/index.js!./README.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./README.md\n// module id = 588\n// module chunks = 1","module.exports = \"[![build status](https://secure.travis-ci.org/no23reason/react-qr-svg.svg)](http://travis-ci.org/no23reason/react-qr-svg) [![npm version](https://img.shields.io/npm/v/react-qr-svg.svg)](https://www.npmjs.com/package/react-qr-svg) [![bitHound Score](https://www.bithound.io/github/no23reason/react-qr-svg/badges/score.svg)](https://www.bithound.io/github/no23reason/react-qr-svg) [![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/) [![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release) [![Greenkeeper badge](https://badges.greenkeeper.io/no23reason/react-qr-svg.svg)](https://greenkeeper.io/)\\r\\n# react-qr-svg\\r\\nReact component for rendering SVG QR codes\\r\\n\\r\\n## Demo\\r\\nBasic demo can be found at the [demo page](https://no23reason.github.io/react-qr-svg/#/demo).\\r\\n\\r\\n## Why SVG?\\r\\nMost of the existing React components for QR (namely [`qrcode.react`](https://github.com/zpao/qrcode.react), which was used as a starting point for this project) use `<canvas>` for rendering.\\r\\n\\r\\nThis is fine for most scenarios, however when trying to print such code, it gets blurry. This is caused by the fact that `<canvas>` contents get rastered and *then* scaled in the process resulting in the blurriness.\\r\\n\\r\\nOn the other hand, SVG retains the vector information of its contents and therefore is scaled properly when printed.\\r\\n\\r\\n## Basic Usage\\r\\n\\r\\nInstall using `npm`:\\r\\n```js\\r\\nnpm install react-qr-svg --save\\r\\n```\\r\\n\\r\\nThen use in your application like this:\\r\\n\\r\\n```js\\r\\nimport React from 'react';\\r\\nimport { QRCode } from 'react-qr-svg';\\r\\n\\r\\nclass Demo extends React.Component {\\r\\n    render() {\\r\\n        return (<QRCode\\r\\n                    bgColor=\\\"#FFFFFF\\\"\\r\\n                    fgColor=\\\"#000000\\\"\\r\\n                    level=\\\"Q\\\"\\r\\n                    style={{ width: 256 }}\\r\\n                    value=\\\"some text\\\"\\r\\n                />);\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n## Props\\r\\nThe props available are (shown with default values):\\r\\n```js\\r\\n{\\r\\n    value: '', // The value to encode in the code\\r\\n    level: 'L', // QR Error correction level\\r\\n    bgColor: '#FFFFFF', // Color of the bright squares\\r\\n    fgColor: '#000000', // Color of the dark squares\\r\\n}\\r\\n```\\r\\n\\r\\nThe `level` prop corresponds to [Error correction level](https://en.wikipedia.org/wiki/QR_code#Error_correction) so the valid values are `L`, `M`, `Q` and `H`.\\r\\n\\r\\nYou can also specify all the props that are valid for the `<svg>` React element (e.g. `style`, `className` or `width` which you can use to specify the size of the QR code).\\r\\n\\r\\n## Acknowledgements\\r\\nThis project is heavily inspired by the [`qrcode.react`](https://github.com/zpao/qrcode.react) project.\\r\\n\\r\\nThis project uses the [`react-component-boilerplate`](https://github.com/survivejs/react-component-boilerplate).\\r\\n\\r\\n## License\\r\\n\\r\\n*react-qr-svg* is available under MIT. See [LICENSE](https://github.com/no23reason/react-qr-svg/tree/master/LICENSE) for more details.\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./README.md\n// module id = 594\n// module chunks = 1"],"sourceRoot":""}